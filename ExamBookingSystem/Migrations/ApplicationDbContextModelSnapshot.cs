// <auto-generated />
using ExamBookingSystem.Data;
using ExamBookingSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System;

#nullable disable

namespace ExamBookingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExamBookingSystem.Models.ActionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("BookingRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int?>("ExaminerId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.HasIndex("BookingRequestId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ExaminerId");

                    b.ToTable("ActionLogs");
                });
            modelBuilder.Entity<Administrator>(entity =>
            {
                entity.ToTable("Administrators");
                entity.HasKey(e => e.Id);
                entity.HasIndex(e => e.Email).IsUnique();
                entity.HasIndex(e => e.Phone);
                entity.Property(e => e.CreatedAt).HasDefaultValueSql("now()");
            });
            modelBuilder.Entity("ExamBookingSystem.Models.BookingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int?>("AssignedExaminerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MeetingLocation")
                        .HasColumnType("text");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PreferredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreferredTime")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScheduledTime")
                        .HasColumnType("text");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StudentAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StudentLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StudentPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedExaminerId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Status");

                    b.HasIndex("StudentEmail");

                    b.ToTable("BookingRequests");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.Examiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.ToTable("Examiners");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.ExaminerResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingRequestId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ContactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExaminerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProposedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProposedLocation")
                        .HasColumnType("text");

                    b.Property<string>("ProposedTime")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Response")
                        .HasColumnType("integer");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactedAt");

                    b.HasIndex("ExaminerId");

                    b.HasIndex("Response");

                    b.HasIndex("BookingRequestId", "ExaminerId")
                        .IsUnique();

                    b.ToTable("ExaminerResponses");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.ActionLog", b =>
                {
                    b.HasOne("ExamBookingSystem.Models.BookingRequest", "BookingRequest")
                        .WithMany("ActionLogs")
                        .HasForeignKey("BookingRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamBookingSystem.Models.Examiner", "Examiner")
                        .WithMany()
                        .HasForeignKey("ExaminerId");

                    b.Navigation("BookingRequest");

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.BookingRequest", b =>
                {
                    b.HasOne("ExamBookingSystem.Models.Examiner", "AssignedExaminer")
                        .WithMany()
                        .HasForeignKey("AssignedExaminerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedExaminer");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.ExaminerResponse", b =>
                {
                    b.HasOne("ExamBookingSystem.Models.BookingRequest", "BookingRequest")
                        .WithMany("ExaminerResponses")
                        .HasForeignKey("BookingRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamBookingSystem.Models.Examiner", "Examiner")
                        .WithMany("Responses")
                        .HasForeignKey("ExaminerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingRequest");

                    b.Navigation("Examiner");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.BookingRequest", b =>
                {
                    b.Navigation("ActionLogs");

                    b.Navigation("ExaminerResponses");
                });

            modelBuilder.Entity("ExamBookingSystem.Models.Examiner", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
